% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_performance.R
\name{plot_performance}
\alias{plot_performance}
\title{Create Visualization for Performance Metrics}
\usage{
plot_performance(
  results,
  plot_type = c("heatmap", "boxplot", "violin"),
  theme = "default",
  colors = c("#4A90E2", "#50C878", "#E67E22")
)
}
\arguments{
\item{results}{A data frame of class 'daa_performance' containing performance metrics
Must include 'method' column and at least one metric column}

\item{plot_type}{Type of plot to generate. Options:
\itemize{
\item "heatmap": Creates a heatmap showing all metrics for each method
\item "boxplot": Creates boxplots for each metric grouped by method
\item "violin": Creates violin plots with jittered points for distribution
}}

\item{theme}{Visual theme settings. Options:
\itemize{
\item "default": Clean minimal theme
\item "dark": Dark background theme
\item "classic": Classic theme with white background
}}

\item{colors}{Colors for the plots. Default: c("#4A90E2", "#50C878", "#E67E22")}
}
\value{
A ggplot2 object (or plotly object if plotly is available) containing:
\itemize{
\item Performance visualization based on specified plot_type
\item Confidence intervals (if available in input data)
\item Interactive features (if plotly is available)
}
}
\description{
Generate various types of plots to visualize and compare performance metrics
across different differential abundance analysis methods. Supports multiple visualization
types and customizable themes.
}
\details{
Visualize Performance Comparison Results

The function automatically handles:
\itemize{
\item Confidence interval visualization for boxplot and violin plots
\item Interactive features when plotly package is available
\item Automatic scaling for different metrics
\item Proper angle rotation for method labels
}
}
\examples{
# Create sample test results
test_results <- list(
  "DESeq2" = c(TRUE, FALSE, TRUE, FALSE, TRUE, TRUE),
  "edgeR" = c(TRUE, TRUE, FALSE, FALSE, TRUE, TRUE),
  "limma" = c(TRUE, FALSE, TRUE, FALSE, FALSE, TRUE)
)
true_status <- c(TRUE, FALSE, TRUE, FALSE, TRUE, TRUE)

# Calculate performance metrics
perf <- evaluate_performance(
  test_results,
  true_status,
  metrics = c("sensitivity", "specificity", "precision", "f1_score", "accuracy")
)

# Create different types of plots
# Heatmap visualization
p1 <- plot_performance(perf, plot_type = "heatmap", theme = "default")
print(p1)

# Boxplot with confidence intervals
p2 <- plot_performance(perf, plot_type = "boxplot", theme = "classic")
print(p2)

# Violin plot with dark theme
p3 <- plot_performance(perf, plot_type = "violin", theme = "dark")
print(p3)

# Save plots if needed
\dontrun{
  ggplot2::ggsave("performance_heatmap.pdf", p1, width = 8, height = 6)
  ggplot2::ggsave("performance_boxplot.pdf", p2, width = 10, height = 6)
  ggplot2::ggsave("performance_violin.pdf", p3, width = 10, height = 6)
}

}
