% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_performance.R
\name{plot_performance}
\alias{plot_performance}
\title{Create Visualization for Performance Metrics}
\usage{
plot_performance(
  results,
  plot_type = c("heatmap", "boxplot", "violin"),
  theme = "default"
)
}
\arguments{
\item{results}{A data frame of class 'daa_performance' containing performance metrics
Must include 'method' column and at least one metric column}

\item{plot_type}{Type of plot to generate. Options:
\itemize{
\item "heatmap": Creates a heatmap showing all metrics for each method
\item "boxplot": Creates boxplots for each metric grouped by method
\item "violin": Creates violin plots with jittered points for distribution
}}

\item{theme}{Visual theme settings. Options:
\itemize{
\item "default": Clean minimal theme
\item "dark": Dark background theme
\item "classic": Classic theme with white background
}}
}
\value{
A ggplot2 object (or plotly object if plotly is available) containing:
\itemize{
\item Performance visualization based on specified plot_type
\item Confidence intervals (if available in input data)
\item Interactive features (if plotly is available)
}
}
\description{
Generate various types of plots to visualize and compare performance metrics
across different differential abundance analysis methods. Supports multiple visualization
types and customizable themes.
}
\details{
Visualize Performance Comparison Results

The function automatically handles:
\itemize{
\item Confidence interval visualization for boxplot and violin plots
\item Interactive features when plotly package is available
\item Automatic scaling for different metrics
\item Proper angle rotation for method labels
}
}
\examples{
\dontrun{
# Create heatmap visualization
p1 <- plot_performance(results, plot_type = "heatmap", theme = "default")

# Create boxplot with confidence intervals
p2 <- plot_performance(results, plot_type = "boxplot", theme = "dark")

# Create interactive violin plot
p3 <- plot_performance(results, plot_type = "violin", theme = "classic")

# Print plots
print(p1)
print(p2)
print(p3)
}

}
